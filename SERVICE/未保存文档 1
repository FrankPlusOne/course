shell,bash,sh,ksh,tcsh

let 计算不需要$,不显示结果

	计算的简写  let z=8+2

z=`expr 1 + 2`
z=$[2+2]
let z=1+9


条件测试操作
    字符串匹配
    比较整数值的大小
    识别文件/目录的状态
    多个条件/操作的逻辑组合

1. “test 表达式”或者[ 表达式 ]

字符串测试
		==等于
		!= 不等于
		-z 检查变量的值是否未设置（空值）

&&逻辑与
||   逻辑或	
		A && B  执行A,仅当A成功,才执行B
		A || B  执行A,仅当A失败,才执行B
		A ;  B  执行A,执行B


-eq		等于equal
-ne		不等于not equal
-gt		大于greater than
-ge		大于等于great or equal
-lt		小于 less than
-le		小于等于less or equal

每分钟判断当前登陆用户,超过3个则发邮件给root报警
计划任务  执行脚本


如果/test目录有,就无操作
如果/test目录没有,就创建/test
如果/test/目录下,有nb.txt就无操作
如果/test/目录下,没有nb.txt就创建
-e存在
-d存在且为目录
-f存在且为文件
-r  ---  root 能读
-w	  ---  root 能写
-x  ---  root 不能执行

   A && B
   A || B


    if  条件测试 ;then  
				命令序列
    fi
++++++++++++++++++++++++++++++++
    if  条件测试
        then  命令序列1
        else  命令序列2
    fi
++++++++++++++++++++++++++++++++
    if  条件测试1
        then  命令序列1
    elif  条件测试2
        then  命令序列2
        else  命令序列n
    fi

vim test.sh
#!/bin/bash
read -p "请输入用户名:"  user
read -p "请输入密码:"     pass
if [ -z $user ];then
			echo "你没有输入用户"
			echo "xxx"
			exit
fi

ping -c2 ip &>/dev/null
if [ 判断 ];then
			正确的命令
else	
			错误的命令
fi



if [ 判断1 ];then
		命令
elif [ 判断2 ];then
		命令
else
		命令
fi
num=$[RANDOM%10]
read -p "我有一个随机数,你猜:"  cai

石头,剪刀,布
num=$[RANDOM%3]
read -p "请出拳(石头,剪刀,布):"  cai
































